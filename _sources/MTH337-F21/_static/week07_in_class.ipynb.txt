{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a7544339",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3db87b51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=np.linspace(-np.pi,2*np.pi,100)\n",
    "y=np.sin( (np.pi**2) * (x**3) )\n",
    "plt.plot(x,y,'c-s',linewidth=4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ef3a1573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1., 1., 1., 2., 5., 8.])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.ones(10)\n",
    "a[-3:]=[2,5,8]\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dae41075",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 11 is out of bounds for axis 0 with size 10",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-f1aa1dfc5ed8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m11\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m: index 11 is out of bounds for axis 0 with size 10"
     ]
    }
   ],
   "source": [
    "a[11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a62e9e92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1.])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[7:22]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7c00f9f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.-1.j  , 0.-0.99j, 0.-0.98j, 0.-0.97j, 0.-0.96j])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "r0=np.linspace(complex(-1,0),complex(1,0),201)\n",
    "i0=np.linspace(complex(0,-1),complex(0,1),201)\n",
    "i0[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9c4849cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(201, 201)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr,ii=np.meshgrid(r0,i0)\n",
    "rr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ce2b76e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.  +0.j, -0.99+0.j, -0.98+0.j],\n",
       "       [-1.  +0.j, -0.99+0.j, -0.98+0.j],\n",
       "       [-1.  +0.j, -0.99+0.j, -0.98+0.j]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr[:3,:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f1480ea4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.-1.j  , 0.-1.j  , 0.-1.j  ],\n",
       "       [0.-0.99j, 0.-0.99j, 0.-0.99j],\n",
       "       [0.-0.98j, 0.-0.98j, 0.-0.98j]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ii[:3,:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "86a8c62c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.  -1.j  , -0.99-1.j  , -0.98-1.j  ],\n",
       "       [-1.  -0.99j, -0.99-0.99j, -0.98-0.99j],\n",
       "       [-1.  -0.98j, -0.99-0.98j, -0.98-0.98j]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z0=rr+ii\n",
    "z0[:3,:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8a15e1b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "r0=np.linspace(complex(-1,0),complex(1,0),201)\n",
    "i0=np.linspace(complex(0,-1),complex(0,1),201)\n",
    "rr,ii=np.meshgrid(r0,i0)\n",
    "z0=rr+ii\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a6c8dca4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.array([1,2,3,4,5,6]).reshape(2,-1)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8a585205",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f32546a6eb0>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD8CAYAAAB6paOMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAR+0lEQVR4nO3df6jdd33H8efLpBGM8UcX2sa2ah1Blg3b1SxWOmY7bUnLRhQ21jJqEeXSYWEbcxDm0LEN5pQ5UKtZpqEKahlo1uBifygb3SZ1idIfiW1tlpb17oZmtl39iTXzvT/uN9vh9tzcc+753ntz83k+4HC+38+Pc97ffuh95fu953xvqgpJUrtesNIFSJJWlkEgSY0zCCSpcQaBJDXOIJCkxhkEktS4iYIgydlJ7k7yaPf88nnGPZ7kwST3JTk47nxJ0tKZ9IxgJ/DVqtoMfLXbn8+VVXVJVW1d5HxJ0hLIJF8oS/IIcEVVHUuyCfinqnrtkHGPA1ur6juLmS9JWjqTBsF/V9XLBvafqarnXd5J8hjwDFDA31TV7nHmd31TwBTAGta8/kW8ZNF1a/nVhhetdAka04n1WekSNIafPPs0J374g0Ut2tqFBiT5CnDekK73jvE+l1fVTJJzgLuTPFxV94wxny48dgO8JGfXG/LmcaZrhZ3Y9vqVLkFjevKXXrjSJWgMj9364UXPXTAIquot8/UleTLJpoFLO8fneY2Z7vl4kr3ANuAeYKT5kqSlM+kvi/cBN3bbNwK3zx2QZH2SDSe3gauBQ6POlyQtrUmD4APAVUkeBa7q9knyiiT7uzHnAv+S5H7g34B/qKo7TjVfkrR8Frw0dCpV9RTwvIv13aWga7vto8DF48yXJC0fv1ksSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxEwVBkrOT3J3k0e755UPGXJjkH5M8lORwkt8d6PuTJP+Z5L7uce0k9UiSxjfpGcFO4KtVtRn4arc/1wngD6rq54DLgHcn2TLQ/9dVdUn32D9kviRpCU0aBDuAT3fbnwbeOndAVR2rqm92298DHgLOn/B9JUk9mTQIzq2qYzD7Ax8451SDk7wa+EXg6wPNNyd5IMmeYZeWJElLa8EgSPKVJIeGPHaM80ZJXgx8Afi9qvpu1/wJ4GeBS4BjwF+dYv5UkoNJDv6EH4/z1pKkU1i70ICqest8fUmeTLKpqo4l2QQcn2fcWcyGwGer6osDr/3kwJi/Bb50ijp2A7sBXpKza6G6JUmjmfTS0D7gxm77RuD2uQOSBPgU8FBVfXhO36aB3bcBhyasR5I0pkmD4APAVUkeBa7q9knyiiQnPwF0OXAD8KtDPib6wSQPJnkAuBL4/QnrkSSNacFLQ6dSVU8Bbx7SPgNc223/C5B55t8wyftLkibnN4slqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxvUSBEm2J3kkyZEkO4f0J8lHuv4Hklw66lxJ0tKaOAiSrAFuAa4BtgDXJ9kyZ9g1wObuMQV8Yoy5kqQl1McZwTbgSFUdrarngNuAHXPG7AA+U7PuBV6WZNOIcyVJS6iPIDgfeGJgf7prG2XMKHMBSDKV5GCSgz/hxxMXLUma1UcQZEhbjThmlLmzjVW7q2prVW09ixeOWaIkaT5re3iNaeDCgf0LgJkRx6wbYa4kaQn1cUZwANic5KIk64DrgH1zxuwD3t59eugy4NmqOjbiXEnSEpr4jKCqTiS5GbgTWAPsqarDSW7q+ncB+4FrgSPAD4F3nGrupDVJkkbXx6Uhqmo/sz/sB9t2DWwX8O5R50qSlo/fLJakxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1LhegiDJ9iSPJDmSZOeQ/t9O8kD3+FqSiwf6Hk/yYJL7khzsox5J0ugm/pvFSdYAtwBXAdPAgST7qupbA8MeA95UVc8kuQbYDbxhoP/KqvrOpLVIksbXxxnBNuBIVR2tqueA24AdgwOq6mtV9Uy3ey9wQQ/vK0nqQR9BcD7wxMD+dNc2n3cCXx7YL+CuJN9IMjXfpCRTSQ4mOfgTfjxRwZKk/zfxpSEgQ9pq6MDkSmaD4JcHmi+vqpkk5wB3J3m4qu553gtW7Wb2khIvydlDX1+SNL4+zgimgQsH9i8AZuYOSvI64JPAjqp66mR7Vc10z8eBvcxeapIkLZM+guAAsDnJRUnWAdcB+wYHJHkl8EXghqr69kD7+iQbTm4DVwOHeqhJkjSiiS8NVdWJJDcDdwJrgD1VdTjJTV3/LuB9wM8AH08CcKKqtgLnAnu7trXA56rqjklrkiSNro/fEVBV+4H9c9p2DWy/C3jXkHlHgYvntkuSlo/fLJakxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1LhegiDJ9iSPJDmSZOeQ/iuSPJvkvu7xvlHnSpKW1sR/szjJGuAW4CpgGjiQZF9VfWvO0H+uql9b5FxJ0hLp44xgG3Ckqo5W1XPAbcCOZZgrSerBxGcEwPnAEwP708Abhox7Y5L7gRngPVV1eIy5JJkCpgDWbnwpRz96yeSVa9n81pZ/W+kSNKY/P+fBlS5BY9i2/78WPbePM4IMaas5+98EXlVVFwMfBf5+jLmzjVW7q2prVW19wYb1i61VkjRHH0EwDVw4sH8Bs//q/z9V9d2q+n63vR84K8nGUeZKkpZWH0FwANic5KIk64DrgH2DA5KclyTd9rbufZ8aZa4kaWlN/DuCqjqR5GbgTmANsKeqDie5qevfBfwG8DtJTgA/Aq6rqgKGzp20JknS6Pr4ZfHJyz3757TtGtj+GPCxUedKkpaP3yyWpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktS4XoIgyfYkjyQ5kmTnkP4/THJf9ziU5H+SnN31PZ7kwa7vYB/1SJJGN/HfLE6yBrgFuAqYBg4k2VdV3zo5pqo+BHyoG//rwO9X1dMDL3NlVX1n0lokSePr44xgG3Ckqo5W1XPAbcCOU4y/Hvh8D+8rSepBH0FwPvDEwP501/Y8SV4EbAe+MNBcwF1JvpFkar43STKV5GCSgz/93g96KFuSBD1cGgIypK3mGfvrwL/OuSx0eVXNJDkHuDvJw1V1z/NesGo3sBvgha85f77XlySNqY8zgmngwoH9C4CZecZex5zLQlU10z0fB/Yye6lJkrRM+giCA8DmJBclWcfsD/t9cwcleSnwJuD2gbb1STac3AauBg71UJMkaUQTXxqqqhNJbgbuBNYAe6rqcJKbuv5d3dC3AXdV1eAF/nOBvUlO1vK5qrpj0pokSaPr43cEVNV+YP+ctl1z9m8Fbp3TdhS4uI8aJEmL4zeLJalxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1rpcgSLInyfEkQ//wfGZ9JMmRJA8kuXSgb3uSR7q+nX3UI0kaXV9nBLcC20/Rfw2wuXtMAZ8ASLIGuKXr3wJcn2RLTzVJkkbQSxBU1T3A06cYsgP4TM26F3hZkk3ANuBIVR2tqueA27qxkqRlsly/IzgfeGJgf7prm6/9eZJMJTmY5OBPv/eDJStUklqzXEGQIW11ivbnN1btrqqtVbX1BRvW91qcJLVs7TK9zzRw4cD+BcAMsG6edknSMlmuM4J9wNu7Tw9dBjxbVceAA8DmJBclWQdc142VJC2TXs4IknweuALYmGQaeD9wFkBV7QL2A9cCR4AfAu/o+k4kuRm4E1gD7Kmqw33UJEkaTS9BUFXXL9BfwLvn6dvPbFBIklaA3yyWpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktS4XoIgyZ4kx5Mcmqf/t5M80D2+luTigb7HkzyY5L4kB/uoR5I0ur7OCG4Ftp+i/zHgTVX1OuDPgN1z+q+sqkuqamtP9UiSRtTXH6+/J8mrT9H/tYHde4EL+nhfSdLkVuJ3BO8EvjywX8BdSb6RZGoF6pGkpvVyRjCqJFcyGwS/PNB8eVXNJDkHuDvJw1V1z5C5U8AUwNqNL12WeiWpBct2RpDkdcAngR1V9dTJ9qqa6Z6PA3uBbcPmV9XuqtpaVVtfsGH9cpQsSU1YliBI8krgi8ANVfXtgfb1STac3AauBoZ+8kiStDR6uTSU5PPAFcDGJNPA+4GzAKpqF/A+4GeAjycBONF9QuhcYG/Xthb4XFXd0UdNkqTR9PWpoesX6H8X8K4h7UeBi58/Q5K0XPxmsSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktS4XoIgyZ4kx5Mcmqf/iiTPJrmve7xvoG97kkeSHEmys496JEmj6+uM4FZg+wJj/rmqLukefwqQZA1wC3ANsAW4PsmWnmqSJI2glyCoqnuApxcxdRtwpKqOVtVzwG3Ajj5qkiSNZu0yvtcbk9wPzADvqarDwPnAEwNjpoE3DJucZAqY6nZ/fPT6Px56GWqV2wh8Z6WLWAp/ceYe2xl7XH9xZh4XnLlr9trFTlyuIPgm8Kqq+n6Sa4G/BzYDGTK2hr1AVe0GdgMkOVhVW5eo1hVzph4XnLnH5nGtPmfqsSU5uNi5y/Kpoar6blV9v9veD5yVZCOzZwAXDgy9gNkzBknSMlmWIEhyXpJ029u6930KOABsTnJRknXAdcC+5ahJkjSrl0tDST4PXAFsTDINvB84C6CqdgG/AfxOkhPAj4DrqqqAE0luBu4E1gB7ut8dLGR3H3Wfhs7U44Iz99g8rtXnTD22RR9XZn8eS5Ja5TeLJalxBoEkNW5VBEGSs5PcneTR7vnl84x7PMmD3W0sFv1RqqW20G01MusjXf8DSS5diTrHNcJxzXurkdPZCLdQWZXrBZPdHuZ0luTCJP+Y5KEkh5P87pAxq27dRjyu8desqk77B/BBYGe3vRP4y3nGPQ5sXOl6FziWNcC/A68B1gH3A1vmjLkW+DKz37O4DPj6Stfd03FdAXxppWtdxLH9CnApcGie/lW3XmMc22pds03Apd32BuDbZ8j/Z6Mc19hrtirOCJi97cSnu+1PA29duVImNsptNXYAn6lZ9wIvS7JpuQsd0xl7u5Ba+BYqq3G9gIluD3Naq6pjVfXNbvt7wEPM3slg0KpbtxGPa2yrJQjOrapjMPsfAjhnnnEF3JXkG90tKU5Hw26rMXchRxlzuhm15jcmuT/Jl5P8/PKUtuRW43qNY1WvWZJXA78IfH1O16pet1McF4y5Zst5r6FTSvIV4LwhXe8d42Uur6qZJOcAdyd5uPsXz+lklNtqjHzrjdPIKDXPd6uR1W41rteoVvWaJXkx8AXg96rqu3O7h0xZFeu2wHGNvWanzRlBVb2lqn5hyON24MmTp2zd8/F5XmOmez4O7GX2csXpZpTbaqzGW28sWHPNf6uR1W41rtdIVvOaJTmL2R+Wn62qLw4ZsirXbaHjWsyanTZBsIB9wI3d9o3A7XMHJFmfZMPJbeBq4HS8Q+kot9XYB7y9+1TDZcCzJy+NncYWPK7Mf6uR1W41rtdIVuuadTV/Cnioqj48z7BVt26jHNdi1uy0uTS0gA8Af5fkncB/AL8JkOQVwCer6lrgXGBvd/xrgc9V1R0rVO+8qmrobTWS3NT17wL2M/uJhiPAD4F3rFS9oxrxuOa71chpLQvfQmXVrddJIxzbqlwz4HLgBuDBJPd1bX8EvBJW9bqNclxjr5m3mJCkxq2WS0OSpCViEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTG/S/CuSyJN5XmZwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7e8294c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f32545be0a0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a=np.array([0,2,3,3,2,1]).reshape(2,-1)\n",
    "plt.imshow(a,cmap='seismic')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8dd5ba61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.-1.j,  0.-1.j,  1.-1.j],\n",
       "       [-1.+0.j,  0.+0.j,  1.+0.j],\n",
       "       [-1.+1.j,  0.+1.j,  1.+1.j]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r0=np.linspace(complex(-1,0),complex(1,0),3)\n",
    "i0=np.linspace(complex(0,-1),complex(0,1),3)\n",
    "rr,ii=np.meshgrid(r0,i0)\n",
    "z0=rr+ii\n",
    "z0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "073499c1",
   "metadata": {},
   "source": [
    "run newton 100 times\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8de41f03",
   "metadata": {},
   "outputs": [],
   "source": [
    "roots=[complex(np.cos(2*np.pi*j/3), np.sin(2*np.pi*j/3)) for j in range(3)] # roots for z^3-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "db6bf056",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.+2.j 1.+1.j]\n",
      " [0.+4.j 2.+2.j]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2.        , 1.        ],\n",
       "       [4.12310563, 2.23606798]])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "newton_iteration=np.array([complex(1,2),complex(1,1),complex(0,4),complex(2,2)]).reshape(2,2)\n",
    "print(newton_iteration)\n",
    "\n",
    "np.abs(newton_iteration-roots[0]) # distance newton-iteration -- first root\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3ae63ee0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2., 1.],\n",
       "       [4., 2.]])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=newton_iteration.real\n",
    "b=newton_iteration.imag\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0eab689f",
   "metadata": {},
   "outputs": [],
   "source": [
    "z=np.array([[~r1,~r2,~r1],[~r3,~r3,~r2],[~r2,~r1,~r1]])\n",
    "\n",
    "a=[]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98c18c95",
   "metadata": {},
   "source": [
    "## boolean indexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "170610de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6, 7, 8])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.arange(1,9)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "96100fc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True, False,  True, False,  True, False,  True])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a%2==0 # looking for even numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "375e3fba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 4, 6, 8])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[a%2==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a949f521",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 4]\n",
      " [5 6]\n",
      " [7 8]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=np.arange(1,9).reshape(4,2)\n",
    "print(b)\n",
    "b[b<4]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d84debeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 5, 7])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb=(b>2) & (b%2==1) # b>2 and b odd\n",
    "b[bb]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0dac3842",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2., 1.],\n",
       "       [4., 2.]])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb=(b>2) & (b%2==1) # b>2 and b odd \n",
    "b[bb]=0\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d96eca31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.zeros((2,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "57680839",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.]])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=np.zeros(b.shape)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6d4599e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  0.],\n",
       "       [ 0., 11.],\n",
       "       [ 0., 11.],\n",
       "       [ 0., 11.]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c[b>3]=11\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7c9bc1f9",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'roots' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-45-75c2cc18d3dd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mroots\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'roots' is not defined"
     ]
    }
   ],
   "source": [
    "roots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d24c3c99",
   "metadata": {},
   "outputs": [],
   "source": [
    "roots=[complex(np.cos(2*np.pi*j/3), np.sin(2*np.pi*j/3)) for j in range(3)] # roots for z^3-1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7bb44ba4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(1+0j),\n",
       " (-0.4999999999999998+0.8660254037844387j),\n",
       " (-0.5000000000000004-0.8660254037844384j)]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roots\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e99cca21",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'iterations' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-bdee4f570926>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0miterations\u001b[0m \u001b[0;31m# the 100th iteration of newton's method (201x201 array)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'iterations' is not defined"
     ]
    }
   ],
   "source": [
    "iterations # the 100th iteration of newton's method (201x201 array)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2600fdbb",
   "metadata": {},
   "source": [
    "create array of zeros `colorcode`, of shape 201x201\n",
    "\n",
    "for each root we want to find the points in `iteration` close to it\n",
    "\n",
    "(distance < tolerance) -> np.abs(newton_iteration-roots[0]) # distance newton-iteration -- first root\n",
    "\n",
    "\n",
    "set each entry of colorcode to the number corresponding to the root it is close to\n",
    "\n",
    "plot using imshow(colorcode,cmap='ma')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd1cc812",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.        , 0.01333333, 0.02666667, 0.04      ],\n",
       "       [0.05333333, 0.06666667, 0.08      , 0.09333333],\n",
       "       [0.10666667, 0.12      , 0.13333333, 0.14666667],\n",
       "       [0.16      , 0.17333333, 0.18666667, 0.2       ]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iteration=np.linspace(0,0.2,16).reshape(4,4)\n",
    "iteration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b8eeaefd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 0.1, 0.2]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roots=[0,0.1,0.2]\n",
    "roots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a20b4332",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ True,  True,  True,  True],\n",
       "       [False, False, False, False],\n",
       "       [False, False, False, False],\n",
       "       [False, False, False, False]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=np.abs(iteration-roots[0])<0.05\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1c6cfb4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "colorcode=np.zeros((4,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "032e1fa1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 1., 1., 1.],\n",
       "       [0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "colorcode[b]=1\n",
    "colorcode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7752154e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f9be75929a0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(colorcode,cmap='spring')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0ce5f42e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f9be63d8400>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "b=np.abs(iteration-roots[1])<0.05\n",
    "colorcode[b]=2\n",
    "\n",
    "plt.imshow(colorcode,cmap='spring')\n",
    "plt.xticks(ticks=np.arange(4),labels=lab)\n",
    "plt.xlabel('real')\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "23d9196e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function xticks in module matplotlib.pyplot:\n",
      "\n",
      "xticks(ticks=None, labels=None, **kwargs)\n",
      "    Get or set the current tick locations and labels of the x-axis.\n",
      "    \n",
      "    Pass no arguments to return the current values without modifying them.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    ticks : array-like, optional\n",
      "        The list of xtick locations.  Passing an empty list removes all xticks.\n",
      "    labels : array-like, optional\n",
      "        The labels to place at the given *ticks* locations.  This argument can\n",
      "        only be passed if *ticks* is passed as well.\n",
      "    **kwargs\n",
      "        `.Text` properties can be used to control the appearance of the labels.\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    locs\n",
      "        The list of xtick locations.\n",
      "    labels\n",
      "        The list of xlabel `.Text` objects.\n",
      "    \n",
      "    Notes\n",
      "    -----\n",
      "    Calling this function with no arguments (e.g. ``xticks()``) is the pyplot\n",
      "    equivalent of calling `~.Axes.get_xticks` and `~.Axes.get_xticklabels` on\n",
      "    the current axes.\n",
      "    Calling this function with arguments is the pyplot equivalent of calling\n",
      "    `~.Axes.set_xticks` and `~.Axes.set_xticklabels` on the current axes.\n",
      "    \n",
      "    Examples\n",
      "    --------\n",
      "    >>> locs, labels = xticks()  # Get the current locations and labels.\n",
      "    >>> xticks(np.arange(0, 1, step=0.2))  # Set label locations.\n",
      "    >>> xticks(np.arange(3), ['Tom', 'Dick', 'Sue'])  # Set text labels.\n",
      "    >>> xticks([0, 1, 2], ['January', 'February', 'March'],\n",
      "    ...        rotation=20)  # Set text labels and properties.\n",
      "    >>> xticks([])  # Disable xticks.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(plt.xticks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "22a90559",
   "metadata": {},
   "outputs": [],
   "source": [
    "lab=[f'{k:.1f}' for k in np.linspace(-1,1,4)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "179211aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
