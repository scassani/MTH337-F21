Answers to Weekly Summary questions
===================================
Week 2
~~~~~~

- Are some quizzes grades going to be dropped?

yes, the lowest score will be dropped

- Question on about how much time we will spend on each project in hours?

That is very hard to quantify. We will try to spend some time working in class, but you are aexpected to work on your own to complete the project

- I'm still wondering what is the difference between return and print and in what situations we use them. 
- What is the difference between `return` and `print`?

``return`` is used to return an output of a function. ``print`` is used to print something to screen.

- Are we able to use function calls (along with argument) as an element to append to a list?

yes

- Since in python you don't have to assign variable types, is it not memory efficient?

that is correct. but the advantage is a more flexible and more user friendly code.

- is there any rules in project 1's sequence? it seems like when the input numbers is big enough, the return sequence always looks the same for the first a few numbers.

This could be an interesting direction to explore in the project

- I noticed in some functions that we wrote in class, there weren't any arguments and in others there were arguments. Can you explain why some functions have arguments and some don't and how to know when to use arguments and when not to?

it depends on what does the function needs. Most of the functions we will define will have arguments.

- How many projects are we looking at over the course of the semester?
- How much projects will we have over the whole course?

a minimum of 7, a maximum of 10 depending on how quickly we get through the material

- Does the project only require two functions?

It requires the two basic functions mentioned in the project description. Then you might define others if you think it could be useful.

- Is there any method to obtain the largest numeric value in a list? I'm not talking about the largest index, I mean the largest numeric entry into the list.

`max()`

- what's the difference between a while loop and a for loop? 

They are both used when there is a task that has to be repeated. The ``for`` loop is usually preferred when we have a known range to work on, whereas the ``while`` loop is used when there is a condition to be verified to countinue the loop.

- For the proect are we writing all the text in the jupyter notebook as markdown or are we making a pdf like you showed us and sending 2 file (pdf and code). One there question, can you explain the "continue" one more time. We also learned about, and or, and not, can you explain "not" again.

For the project you have to write the text in markdown and submit one single ipynb document. (The same question was asked last week, please read the answers to the weekly summary). I will do one more example with ``continue`` and ``not``

- When should I use a while loop, and when should I use break? I may be mistaken, but they seem to serve the same purpose. If so, is one better than the other?

If you build the while loop correctly, you might not need a ``break``. But you might need a ``break`` to make the code more "simple". I'll show an example in class.

- How many parts should our project have? 

It dependes on your style. The project should have and introduction,body, and conclusion sections. The body section can be divided in parts depending on the structure you want to give to the project.

- How complex will the functions we define in this course get? Will we get to a point where we are writing functions inside of functions?

we might.

-  I encounter a problem that a cell contains[*] after executed and you explained that I have an infinite loop. Can you explain it in detail and how can we avoid it while using the `for` loop?

You should not encounter an infinite loop while using a ``for`` loop. Do you mind sending me the code so I can look at it?

- The term "exclusive or" was mentioned in class on Thursday. Could you describe what that term means and when it could be used in code?

exclusive or means an expression is True if one of them is True, but it is False if either are True or False. It can be don in python by doing ``bool1 != bool2``

- what exactly the peoject wants us to do? still don't know what's 'Write a Python function full_sequence(k) that for each positive integer k returns its corresponding sequence'. is it saying that i output the only sequence if the number is in it and output nothing if the number is not in it?

The project asks to explore the sequence described in the project page. The function ``full_sequence`` that we will look at in class, should produce the sequence corresponding to the input number given, as explanined in the project page.

- What is the fastest way to end an infinite loop once it starts?

In jupyter push on the stop button in the menu. In general, you will need to kill the execution of the program.

- In your project guidelines you state our code should be well organized and well commented. Do you have any specifics for the comment format or are particular about the white space in the code? Simplified - are we allowed to organize and format our code in any way we wish as long as it is generally well organized, in order, and well explained?

Yes.

- Can we do some background research about our projects?

sure. Just don't cop and paste text from the internet.

- What is the different between integer and float?

integers are integer numbers, float are decimal numbers.

- while loop seems like the only part that I have a lit problem on. 

This is not a question. I will do one more example with while loop today in class.

- Will we see more examples of how to do the write up for our projects? You said that usually students fail the first project and they don't know what to expect but I am aiming for something higher than an F.

There are good examples of a project report online on the class website.

- can a `while` loop and `if` be used in one code. Is using range one way to do the project

The question is not clear. The project can be done in different way depending on the structure you want to give to your code.

- How many times can you use Break in the code? Can you use Break to stop a single command in the code without stopping the entire code? 

``break`` wil stop a loop, not a single command.

- I don't know why you use f when your write a string. 
Example: 
n = 20 
divisors = []   

for d in range(1,n): # range of possible divisers     
	if n/d== 1:         
		divisors.append(d) 
	print(f'the divisors of {n} are {divisors}')


``f` is used to format the string. this way python is going to evaluate what is between the curly brackets, and it will print the value of the given expression.

Week 1
~~~~~~

* How mathematical are we going to get in this class?

Some topics/projects will be more mathematical than others. I will always introduce/refresh the topics necessary for each project

* Will we start the Tuesday quizzes next week? Where will the notes be posted?

Yes. the notes are posted in the class website under the :doc:`Weekly Schedule  <weekly_schedule>` tab

* How hard does the coding in jupyter notebook get? So far it seems quite straightforward but there is already a bit of memorization to it. Was wondering if it gets much more difficult in terms of the coding aspect, or if we learn tools to tackle more in depth questions, and the difficulty comes more from the math itself rather the coding.

So far we have starting from the coding basis. As we proceed with the class the coding will become more convoluted, and will require a little more ingenuity. We will use this conviluted code to build the tools to tackle the questions.

* (What/How many) other modules (besides math and numpy) will we learn to draw from over the course of the semester? 

A few more. The plotting one for example, but also a module for internet 'searches' and for pattern investigation for example. We might see some more...

* how can i format integer or string values into LaTeX?

LaTeX goes in Markdown cells while the values of variable are in code cells. I would use a markdown cell with the LaTeX and then I would add a code cell printing the varaible output

* Does adding an item to a list keep its type? For example if you make a list with an integer and a string do they remain as an integer and string in the list or is there type changed to on uniform type?

A list can contain elements of different types, and the element type is not changed when they are added to the list.

* i'm feeling diffcult on proform the formulas.

This is not a question. 

* Going forward, are the quizzes mostly going to be asking about syntax of code and writing Python code on paper?

Yes, and also given some code, write what would the corresponding outout be.

* Why does jupyter notebook require an f in every print statement but python doesn't?

That is called string formatting. Not all print instructions require the ``f`` in front of it. Also string formatting is not just for Jupyter notebook, but it can used in "regualr" python

* I'm a bit confused on the difference between LaTeX and markdown. Could you explain more about which one you should use for different situations? Is LateX just the format you use to write equations and should that always be done in markdown?

LaTeX is a specific type of formatting to render math formulas nicely. LaTex is used in markdown cells. Markdown cells ususally contain text.

* Will we be learning how to plot in this class?

Yes, in week 2

* How does Kernel work? You said to 'Restart and Run' all projects before turning them in which I haven't tried but the word "restart" makes me feel like my code will get deleted.

The code is saved on you computer. Think of the code as a recipe for a cake. When you run your code in jupyter notebook, you follow the code instructions (recipe) and get some outputs (cake). Restarting the kernel and re-running the code will run the code again producing new output (a brand new cake) but will not erase the code saved on your computer (recipe)

* Does the material covered in this course relate python specifically to math-related applications? Or are we diving deeper into the uses of Python, but math-related code is just helpful to know?

We are exploring different applications. some are math related, some are not.

* 1)About the Boolean expression, will the result that python execute will be as same as the truth table?  2)About the import module, e=100 from math import e y= sin(e) In this situation, will the variable e is calculated or the Euler's number? 3) LateX $\left(\frac{1}{2},\frac{1}{3}\right)$ $\left\{\frac{1}{2},\frac{1}{3}\right\}$ $\left[\frac{1}{2},\frac{1}{3}\right]$  In this situation, for the parentheses and square bracket, it works when I type \left( or \right) But for the curly bracket {, it only works when I type \left\{ and error when I type \left{.  Can you explain that please?  Thank you 

1) Not necessarily. A boolean expression is either ``True`` or ``False``. Python will execute the code if the boolean expression checked is ``True``

2) Yes, e=100  will be overwritten by the Euler number.

3) That is because LaTex uses the regular ``{`` as a delimiter, so the correct way to indicate the curly bracket is ``\{``

* Are there ever cases where we need to specify the amount of decimal places that are needed in the output of our interest? i.e (print(f'.05:100f'))

Not necessarily in this class, but it is a good thing to remember how to do.

* For the quiz do we have to know everything from this week? One other thing is code are vary picky about  speling and formaing mistake (like forgeting : when writing code or "." insted of ","). will you also take off point in quiz for spelling and small formating mistake? 

Yes, and Yes. Coding requires precision, as the similar expression might do profoundly different things.

* Is there somewhere where I can see what all of the math commands (math.sin, math.pi, etc) do individually? I know that I can use help(math.whatever) but I don't want to have to do that for each of the many commands.

you can get a list of avaialble commands using ``dir(math)``. ``help`` is sued with a specific function or command

* Can we get Half- credit if half of the code is right?

you will get partial credit in the projects.

* If we write a code snippet like this: print(f"{1.1:5f}"), what does 5f mean? I'm aware using 0.5f gives 5 decimal places. Would 5f be an error?

It will fix the width of the number. (I can show an example in class)

* Is matplotlib and numpy a part of Jupyter Notebook/python, or are they completely separate  programs that we will need to get?

They are included in anaconda. So you already have them

* How to write Latex functions in the markdown mode.

``$`` as delimiters, and then you need the correct LaTeX synthax.

* What is the purpose of string formatting?

It helps authomating some output and avoids code repetion

* I have a question about the reports - Are they done fully in Jupyter? Including all the text? (We don't have to write a separate report document?)

All in Jupyter. You will use Markdon cells for text and Code cells for code.




