{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Root Finding\n",
    "\n",
    "**due Friday Oct 15, at 11:59 pm.**\n",
    "\n",
    "In this report we will play with the roots of a continuous $f(x)$, i.e. the values of $x$ such that $f(x)=0$.\n",
    "\n",
    "There are cases, for example if $f$ is a polynomial of degree two, where the quadratic formula is given to compute the roots of $f(x)$. \n",
    "\n",
    "There are however several cases where the roots cannot be computed by hand. A computational approach can be helpful in these cases, and the approximated value of the root can be computed using an iterative method, up to a desired _tolerance_.\n",
    "\n",
    "Some famous iterative methods (that you have been shown in class) are the _Bisection method_ and the _Secant method_. Both methods need two initial points, and then proceed to iteratively reduce the interval containing the root. The bisection method keeps reducing the interval by a factor of 2, whereas the secant method uses geometry to find the slope of the secant line, and the new endpoint of the interval.\n",
    "\n",
    "In this project we will be working with the __Newton's method__, an iterative method which (usually) guarantees a faster convergence to the root, than the bisection and secant methods.\n",
    "\n",
    "The method works as follows:\n",
    "\n",
    "1. Given f(x), choose an initial guess for the root $x_0$\n",
    "\n",
    "2. Compute the next guess $x_{k+1} = x_{k} - \\dfrac{f(x_{k})}{f'(x_k)}$ for $k\\geq 0,\\qquad$ ( $f'(x)$ is the derivative of $f(x)$ )\n",
    "\n",
    "3. We stop when $|x_{k+1}-x_k| < \\text{tol}$. In this case we say the method converged to a root. \n",
    "\n",
    "\n",
    "Here is an example of the method applied to the function $f(x)=x^2-5x+4$, starting with $x_0=2.3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def f(x):\n",
    "    return x**2 -5 *x +4\n",
    "\n",
    "def fp(x):\n",
    "    return 2*x - 5\n",
    "\n",
    "def newton(x0,f,fp):\n",
    "    x1 = x0 - f(x0)/fp(x0)\n",
    "    return x1\n",
    "\n",
    "x = [2.3,2.3]\n",
    "y = [0,f(x[0])]\n",
    "\n",
    "for k in range(5):\n",
    "    xtmp = newton(x[2*k],f,fp)\n",
    "    x.append(xtmp)\n",
    "    y.append(0)\n",
    "    x.append(xtmp)\n",
    "    y.append(f(xtmp))\n",
    "#print(x,y)\n",
    "    \n",
    "xv=np.linspace(-3.5,2.5,1001)\n",
    "plt.plot([-3.5,2.5],[0,0],'k:',lw=1)\n",
    "plt.plot(xv,f(xv),'r')\n",
    "plt.plot(x,y,'b:.');\n",
    "plt.text(2.3,0.5,'$x_0$')    \n",
    "plt.text(-3.22,-1.5,'$x_1$')\n",
    "plt.text(-0.5,0.5,'$x_2$')\n",
    "plt.xlabel('x',fontsize=16)\n",
    "plt.ylabel('y',fontsize=16)\n",
    "plt.title(\"Newton's Method, $f(x)=x^2-5x+4$\",fontsize=16)\n",
    "plt.savefig('image1.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![figure_1](image1.png \"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The choice of the initial guess $x_0$ is very important for the success of Newton's method, and it can be explored computing the approximated root over a range of initial guesses, as displayed below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n=100\n",
    "x = np.linspace(-2,6,n+1)\n",
    "\n",
    "\n",
    "roots = [1,4]\n",
    "x0=x\n",
    "\n",
    "for k in range(100):\n",
    "    x1=newton(x0,f,fp)\n",
    "    x0=x1\n",
    "\n",
    "for k in range(n+1):\n",
    "    plt.plot([x[k],x[k]],[0,x1[k]],'b--.');\n",
    "plt.plot([0,6],[1,1],'k');\n",
    "plt.plot([0,6],[4,4],'k');\n",
    "plt.xlabel('initial guess, $x_0$',fontsize=16)\n",
    "plt.ylabel('approx. root',fontsize=16)\n",
    "plt.title(\"Newton's Method, $f(x)=x^2-5x+4$\",fontsize=16)\n",
    "plt.savefig('image2.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![figure_2](image2.png \"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"+2\"> **Project:** </font>\n",
    "\n",
    "For each of the following parts, implement the code and comment the results obtained."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 1**\n",
    "\n",
    "* Define function `newton` that computes one iteration of Newton's method \n",
    "\n",
    "* Apply Newton's method to the function $f(x)=x^3 - 7 x^2 + 12x$, and obtain a graph that display the approximates solution computed using Newton's method as a function of the initial guess. (For this step you do not need to check for convergence; you can just run Newton's method for 100 iterations and display the final result found by the method)\n",
    "\n",
    "* Apply Newton's method to the function $f(x)=x^4 - 13 x^2 + 12x$, and obtain a graph that display the approximates solution computed using Newton's method as a function of the initial guess. (For this step you do not need to check for convergence; you can just run Newton's method for 100 iterations and display the final result found by the method)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 2: Complex roots**\n",
    "\n",
    "* Use Newton's method to find which root different points in a rectangular portion of the complex\n",
    "plane converge to for the equation $f(z) = z^3 - 1$.\n",
    "\n",
    "* Color the points in this region according to which root they converge to \n",
    "\n",
    "* Make some additional zoomed in pictures of some interesting region."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 3: Complex roots**\n",
    "\n",
    "\n",
    "* Display the convergence to the roots of other functions of the form $f(z) = z^n - 1$, where $n$ is integer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 4: Bonus**\n",
    "\n",
    "Make a picture encoding the number of iterations needed to converge in the brightness of the color, for one or more of the equations in part 2 and 3"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
